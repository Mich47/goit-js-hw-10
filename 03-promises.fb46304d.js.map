{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAwDA,MAAMC,EAAe,CACnBC,QAASC,SAASC,cAAc,SAChCC,MAAOF,SAASC,cAAc,uBAC9BE,KAAMH,SAASC,cAAc,sBAC7BG,OAAQJ,SAASC,cAAc,yBAGjC,IA7DA,MAQEI,OACEC,KAAKC,c,CAGPA,eACED,KAAKP,QAAQS,iBAAiB,SAAUF,KAAKG,aAAaC,KAAKJ,M,CAGjEG,aAAaE,GACXA,EAAMC,iBAENN,KAAKO,eAAe,CAClBX,MAAOI,KAAKJ,MAAMY,cAClBX,KAAMG,KAAKH,KAAKW,cAChBV,OAAQE,KAAKF,OAAOU,e,CAIxBD,gBAAiBX,MAAAa,EAAKZ,KAAEA,EAAIC,OAAEA,IAC5B,IAAK,IAAIY,EAAI,EAAGA,GAAKZ,EAAQY,GAAK,EAChCV,KAAKW,cAAcD,EAAGD,GACnBG,MAAK,EAACC,SAAEA,EAAQjB,MAAEA,MACjBN,EAAAwB,OAAOC,QAAQ,uBAAqBF,QAAiBjB,MAAU,IAEhEoB,OAAM,EAACH,SAAEA,EAAQjB,MAAEA,MAClBN,EAAAwB,OAAOG,QAAQ,sBAAoBJ,QAAejB,MAAU,IAGhEa,GAASZ,C,CAIbc,cAAcE,EAAUjB,GACtB,OAAO,IAAIsB,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,IAEpCJ,EAAQ,C,SAAEN,E,MAAUjB,IAGtBwB,EAAO,C,SAAEP,E,MAAUjB,GAAQ,GAC1BA,EAAM,G,CAhDb4B,aAAY/B,QAAEA,EAAOG,MAAEA,EAAKC,KAAEA,EAAIC,OAAEA,IAClCE,KAAKP,QAAUA,EACfO,KAAKJ,MAAQA,EACbI,KAAKH,KAAOA,EACZG,KAAKF,OAASA,C,GAwDGN,GAAcO","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nclass PromiseGenerator {\n  constructor({ formRef, delay, step, amount }) {\n    this.formRef = formRef;\n    this.delay = delay;\n    this.step = step;\n    this.amount = amount;\n  }\n\n  init() {\n    this.addListeners();\n  }\n\n  addListeners() {\n    this.formRef.addEventListener('submit', this.onFormSubmit.bind(this));\n  }\n\n  onFormSubmit(event) {\n    event.preventDefault();\n\n    this.createPromises({\n      delay: this.delay.valueAsNumber,\n      step: this.step.valueAsNumber,\n      amount: this.amount.valueAsNumber,\n    });\n  }\n\n  createPromises({ delay, step, amount }) {\n    for (let i = 1; i <= amount; i += 1) {\n      this.createPromise(i, delay)\n        .then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n\n      delay += step;\n    }\n  }\n\n  createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const shouldResolve = Math.random() > 0.3;\n        if (shouldResolve) {\n          resolve({ position, delay });\n        }\n\n        reject({ position, delay });\n      }, delay);\n    });\n  }\n}\n\nconst refFormInput = {\n  formRef: document.querySelector('.form'),\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n};\n\nnew PromiseGenerator(refFormInput).init();\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refFormInput","formRef","document","querySelector","delay","step","amount","init","this","addListeners","addEventListener","onFormSubmit","bind","event","preventDefault","createPromises","valueAsNumber","delay1","i","createPromise","then","position","Notify","success","catch","failure","Promise","resolve","reject","setTimeout","Math","random","constructor"],"version":3,"file":"03-promises.fb46304d.js.map"}